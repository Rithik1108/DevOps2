version: '3.8'

services:
  uptime-monitor:
    build: .
    container_name: uptime-monitor
    environment:
      # Email configuration
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_TO=${EMAIL_TO}
      
      # Slack configuration
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      
      # Websites to monitor (comma-separated)
      - WEBSITES_TO_MONITOR=${WEBSITES_TO_MONITOR:-https://google.com,https://github.com,https://stackoverflow.com}
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
    restart: unless-stopped
    networks:
      - monitoring

  prometheus-exporter:
    build: .
    container_name: uptime-prometheus-exporter
    command: python prometheus_exporter.py
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
    volumes:
      - ./results:/app/results
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - uptime-monitor

  # Optional: Add Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring

  # Optional: Add Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: